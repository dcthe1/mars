comment "//" ;
comment "{" "}" ;
comment "(*" "*)";

Prog. ProgramFile ::= Program Using Declare [Function];

PDec.  Program     ::= "program" Ident ;

Uses.  Using       ::= "uses" [Modules] ;
NoUse. Using       ::= ;

terminator Function "";
Fun.   Function    ::= "function" Ident "(" Declare ")" Declare Block;

Blk. Block ::= "begin" [Stm] "end" ;

Mods. Modules     ::= Ident ;
separator Modules "," ;

NoDecl.  Declare ::= ;
VarDecl. Declare ::= "var" [Vars] ;

VDec. Vars ::= [Ident] ":" Type ;

separator nonempty Vars "," ;
separator nonempty Ident "," ;

terminator Stm "" ;
SAss. Stm ::= SpecExpNP ":=" Exp ;
SIf.  Stm ::= IfStm;
SIs.  Stm ::= SpecExpNP "is" SpecExpNP;
SCs.  Stm ::= "case" SpecExpNP "of" [CaseStm] "end" ;
SBlc. Stm ::= Block ;

CSinter. CaseStm ::= Constant ".." Constant ":" Stm ;
CSconst. CaseStm ::= Constant ":" Stm ;
CSother. CaseStm ::= "otherwise" ":" Stm ;

separator nonempty CaseStm "";

IfEmp. IfStm ::= "if" Exp "then" Stm;
IfEls. IfStm ::= "if" Exp "then" Stm "else" SElse;

ElsEm. SElse ::= Stm ;
ElsIf. SElse ::= IfStm ;

EOr.   Exp  ::= Exp "or" Exp1;
EAnd.  Exp1 ::= Exp1 "and" Exp2 ;

EBOr.  Exp2 ::= Exp2 "&" Exp3 ;
EXor.  Exp3 ::= Exp1 "^";

EBAnd. Exp ::= Exp "|" Exp1 ;
EShl.  Exp ::= Exp "shl" Exp1 ;
EShr.  Exp ::= Exp "shr" Exp1 ;

EAdd. Exp ::= Exp "+" Exp1 ;
ESub. Exp ::= Exp "-" Exp1 ;
EDiv. Exp1 ::= Exp1 "/" Exp2 ;
EMul. Exp1 ::= Exp1 "*" Exp2 ;
EMod. Exp1 ::= Exp1 "mod" Exp2 ;
ECll. Exp2 ::= Ident "(" [Exp] ")";
EInt. Exp3 ::= Integer ;
EVar. Exp3 ::= Ident ;

Elor.         Exp   ::= Exp "or"  Exp1;
Eland.        Exp1  ::= Exp1 "and" Exp2;
Ebitor.       Exp2  ::= Exp2 "|"  Exp3;
Ebitexor.     Exp3  ::= Exp3 "^"  Exp4;
Ebitand.      Exp4  ::= Exp4 "&"  Exp5;
Eeq.          Exp5  ::= Exp5 "="  Exp6;
Eneq.         Exp5  ::= Exp5 "<>" Exp6;
Elthen.       Exp6  ::= Exp6 "<"  Exp7;
Egrthen.      Exp6  ::= Exp6 ">"  Exp7;
Ele.          Exp6  ::= Exp6 "<=" Exp7;
Ege.          Exp6  ::= Exp6 ">=" Exp7;
Eleft.        Exp7  ::= Exp7 "shl" Exp8;
Eright.       Exp7  ::= Exp7 "shr" Exp8;
Eplus.        Exp8  ::= Exp8 "+" Exp9;
Eminus.       Exp8  ::= Exp8 "-" Exp9;
Etimes.       Exp9  ::= Exp9 "*" Exp10;
Ediv.         Exp9  ::= Exp9 "/" Exp10;
Emod.         Exp9  ::= Exp9 "mod" Exp10;
Epreop.       Exp10 ::= Unary_operator Exp9;
Epreinc.      Exp10 ::= "++" Exp10;
Epredec.      Exp10 ::= "--" Exp10;
Efunk.        Exp11 ::= Ident "(" ")" ;
Efunkpar.     Exp11 ::= Ident "(" [Exp] ")" ;
Epostinc.     Exp12 ::= Exp12 "++";
Epostdec.     Exp12 ::= Exp12 "--";
Earr.         Exp13 ::= ArrAcc;
Efld.         Exp13 ::= FieldAcc;
Econst.       Exp13 ::= Constant;
Estring.      Exp13 ::= String;
Evar.         Exp14 ::= Ident;

Negative.    Unary_operator ::= "-" ;
Logicalneg.  Unary_operator ::= "~" ;

Aarr.		 ArrAcc ::= Ident "[" Exp "]";

Ffvar.		 FieldAcc ::= SpecExp "." Ident;

Cep.		SpecExp ::= "(" Exp ")";
Cnp.		SpecExp ::= SpecExpNP;

CNId.		SpecExpNP ::= Ident;
CNParr.		SpecExpNP ::= ArrAcc;
CNPfld.		SpecExpNP ::= FieldAcc;

Cfloat.        Constant ::= Double;
Cint.          Constant ::= Integer;
Ctrue.	       Constant ::= "true";
Cfalse.	       Constant ::= "false";

coercions Exp 14;

separator Exp "," ;

TInt.  Type ::= "integer" ;
TBool. Type ::= "boolean" ;
TRec.  Type ::= Ident ;
